substitutions:
  name: snos-regular
esphome:
  name: "${name}"
  platform: esp32
  board: esp32dev
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: true
  project:
    name: tarbax.snos-regular
    version: "2.2"

# Enable wifi
wifi:

# Enable logging
logger:

# API is a requirement of the dashboard import and to Enable Home Assistant API
api:
  password: "PLEASE-CHANGE-ME"
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: lambda 'return song_str;'

# OTA is required for Over-the-Air updating
ota:
  password: "PLEASE-CHANGE-ME"

# Enable web page
web_server:
  port: 80

# Sets up Bluetooth LE to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: topb
  
# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://tarbax/SNOS/esphome-config/snos-regular.yaml
  
#  sensor configuration
i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

#  led/buzzer configuration
output:
  - platform: ledc
    pin: GPIO27
    id: rtttl_out
  - platform: ledc
    pin: GPIO5
    id: redgpio
  - platform: ledc
    pin: GPIO19
    id: greengpio
  - platform: ledc
    pin: GPIO2
    id: bluegpio

#  buzzer configuration
rtttl:
  output: rtttl_out

#  air quality/temperature configuration
bme680_bsec:
    # i2c address
    # -----------
    # Common values are:
    # - 0x76
    # - 0x77
    # Default: 0x76
    address: 0x76

    # Temperature offset
    # ------------------
    # Useful if device is in enclosure and reads too high
    # Default: 0
    temperature_offset: 3.9

    # IAQ calculation mode
    # --------------------
    # Available options:
    # - static (for fixed position devices)
    # - mobile (for on person or other moveable devices)
    # Default: static
    iaq_mode: static

    # Sample rate
    # -----------
    # Available options:
    # - lp (low power - samples every 3 seconds)
    # - ulp (ultra low power - samples every 5 minutes)
    # Default: lp
    sample_rate: ulp

    # Interval at which to save BSEC state
    # ------------------------------------
    # Default: 6h
    state_save_interval: 6h

sensor:
  - platform: bme680_bsec
    temperature:
      name: "{name} Temperature"
    pressure:
      name: "{name} Pressure"
    humidity:
      name: "{name} Humidity"
    iaq:
      name: "{name} IAQ"
      id: iaq_index
    co2_equivalent:
      name: "{name} CO2 Equivalent"
    breath_voc_equivalent:
      name: "{name} Breath VOC Equivalent"
      
  - platform: bh1750
    name: "{name} Illuminance"
    address: 0x5C
    measurement_duration: 69
    update_interval: 1s
    
text_sensor:
  - platform: bme680_bsec
    iaq_accuracy:
      name: "{name} IAQ Accuracy"
      
  - platform: template
    name: "{name} air quality IAQ"
    icon: "mdi:air-filter"
    lambda: |-
      
      if (id(iaq_index).state <= 50) {
        return {"Uitstekend"};
      }
      else if (id(iaq_index).state <= 100) {
        return {"Heel goed"};
      }
      else if (id(iaq_index).state <= 150) {
        return {"Goed"};
      }
      else if (id(iaq_index).state <= 200) {
        return {"Matig"};
      }
      else if (id(iaq_index).state > 250) {
        return {"Slecht"};
      }
      else if (id(iaq_index).state > 350) {
        return {"Ongezond"};
      }
      else if (id(iaq_index).state > 350) {
        return {"Erg ongezond"};
      }     
      return {};
    update_interval: 60s

  - platform: template
    name: "{name} ventilation advise"
    lambda: |-
      
      if (id(iaq_index).state <= 50) {
        return {"none"};
      }
      else if (id(iaq_index).state <= 100) {
        return {"none"};
      }
      else if (id(iaq_index).state <= 150) {
        return {"ventileren aangewezen"};
      }
      else if (id(iaq_index).state <= 200) {
        return {"ventileren nodig"};
      }
      else if (id(iaq_index).state > 250) {
        return {"ventileren optimaliseren"};
      }
      else if (id(iaq_index).state > 350) {
        return {"ventileren maximaliseren, beperk aanwezigheid"};
      }
      else if (id(iaq_index).state > 350) {
        return {"ventileren maximaliseren, voorkom aanwezigheid"};
      }     
      return {};
    update_interval: 60s

#  button/motion configuration
binary_sensor:
  - platform: gpio
    pin: GPIO33
    name: "{name} button"
    id: topb
  - platform: gpio
    pin: GPIO25
    name: "{name} motion"
    device_class: motion

# Optional temperature sensors
dallas:
  - pin: GPIO18
#  led notification
light:
  - platform: rgb
    name: "{name}Status Light"
    red: redgpio
    green: greengpio
    blue: bluegpio